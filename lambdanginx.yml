AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  InstanceId:
    Type: String
    Description: 'InstanceId of the EC2 instance'

  DatabaseEndpoint:
    Type: String
    Description: 'Endpoint of the database'

  PrivateIPs:
    Type: String
    Description: 'Private IPs of the EC2 instance'

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: wordpressautomation
      Runtime: 'python3.8'
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          InstanceId: !Ref InstanceId
          DatabaseEndpoint: !Ref DatabaseEndpoint
    
      Timeout: 60
      Code:
        ZipFile: |
          import os
          import boto3

          def lambda_handler(event, context):
              
              instance_id = os.environ['InstanceId']
              database_endpoint = os.environ['DatabaseEndpoint']
              private_ip = event['private_ip']
              container_name = event['container_name']
              server_name = event['server_name'] 
              nginx_conf_path = '/etc/nginx/nginx.conf'  
              line_number_to_insert = 55  
              new_server_block = f'''
                  server {{
                      listen 80;
                      server_name {server_name};
                      location / {{
                          proxy_pass http://{private_ip}:8080;
                          proxy_set_header Host $host;
                          proxy_set_header X-Real-IP $remote_addr;
                      }} 
                  }}
              '''

              client = boto3.client('ssm')
              response = client.send_command(
                  InstanceIds=[instance_id],
                  DocumentName='AWS-RunShellScript',
                  Parameters={
                      'commands': [
                          f"sudo docker container run -e 'WORDPRESS_DB_HOST={database_endpoint}' -e 'WORDPRESS_DB_USER=user' -e 'WORDPRESS_DB_PASSWORD=password' -e 'WORDPRESS_DB_NAME=yobitel' -e 'WORDPRESS_TABLE_PREFIX=yobitel_{container_name}' --name {container_name} -d -p {private_ip}:8080:80 2b5691e73f15"
                      ]
                  }
              )
              response = client.send_command(
                  InstanceIds=[instance_id],
                  DocumentName='AWS-RunShellScript',
                  Parameters={
                      'commands': [
                          f"sudo head -n {line_number_to_insert} {nginx_conf_path} | "
                          f"sudo tee /etc/nginx/nginx_temp.conf > /dev/null",
                          f"echo '{new_server_block}' | sudo tee -a /etc/nginx/nginx_temp.conf > /dev/null",
                          f"sudo tail -n +{line_number_to_insert + 1} {nginx_conf_path} | "
                          f"sudo tee -a /etc/nginx/nginx_temp.conf > /dev/null",
                          f"sudo mv /etc/nginx/nginx_temp.conf {nginx_conf_path}",
                          f"systemctl restart nginx"
                      ]
                  }
              )
              response = client.send_command(
                  InstanceIds=[instance_id],
                  DocumentName='AWS-RunShellScript',
                  Parameters={
                      'commands': [
                          f"sudo systemctl restart nginx"
                      ]
                  }
              )
    
              return {
                  'statusCode': 200,
              }
    
    
